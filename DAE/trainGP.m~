function [gprMdl1, gprMdl2] = trainGP(Xtrain, Ytrain, Xtest, Ytest, showFigures)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Trains a Gaussian Process (GP) regression model using Xtrain 
% (Nsamp x Nfeatures) and Ytrain (Nsamp x Noutputs). UQLab is requred!
% Set showFigures = 1 if you wish to superimpose the training and test
% predictions with the real data
%
% Written by: Angelo D. Bonzanini
% Last edited: April 17 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Define anonymous function of the kernel
kfcn = @(XN,XM,theta) (exp(theta(2))^2)*exp(-(pdist2(XN,XM).^2)/(2*exp(theta(1))^2))+(1e-2)*eye(size(XN,1), size(XM,1));

theta0 = [1.5,0.2];

% Train each dimension
gprMdl1 = fitrgp(Xtrain, Ytrain(:,1),'KernelFunction',kfcn, 'KernelParameters',theta0);
gprMdl2 = fitrgp(Xtrain, Ytrain(:,2),'KernelFunction',kfcn, 'KernelParameters',theta0);

%%

if showFigures==1
    ypred1 = predict(gprMdl1, Xtest);
    ypred2 = predict(gprMdl2, Xtest);

    theta1 = gprMdl1.KernelInformation.KernelParameters;  %(sigmaL, sigmaF)
    KK = kfcn(Xtrain, Xtrain, theta1);
    KKs = kfcn(Xtrain, Xtest, theta1);
    ypred1m = (KKs'/KK)*Ytrain(:,1);

    theta2 = gprMdl2.KernelInformation.KernelParameters;  %(sigmaL, sigmaF)
    KK = kfcn(Xtrain, Xtrain, theta2);
    KKs = kfcn(Xtrain, Xtest, theta2);
    ypred2m = (KKs'/KK)*Ytrain(:,2);

    figure()
    subplot(2,1,1)
    hold on
    plot(ypred1)
    plot(Ytest(:,1), 'k.')
    plot(ypred1m)
    subplot(2,1,2)
    ylabel('y_2')
    hold on
    plot(ypred2)
    plot(Ytest(:,2), 'k.')
    plot(ypred2m)
    ylabel('y_2')
    xlabel('Discrete Time')
end



return

%{
% Start uqlab
% uqlab

% train GP
MetaOpts.Type = 'Metamodel';
MetaOpts.Scaling=0;
MetaOpts.MetaType = 'Kriging';
MetaOpts.Corr.Family = 'matern-3_2';
%MetaOpts.Corr.Family = 'Gaussian';
MetaOpts.Corr.Isotropic = 0;

MetaOpts.ExpDesign.X = Xtrain;
MetaOpts.ExpDesign.Y = Ytrain;
myKrigingMat = uq_createModel(MetaOpts);


% Extract hyperparameters
[theta(1,:), theta(2,:)] = myKrigingMat.Kriging.theta;
[sigmaSQ(1,1), sigmaSQ(2,1)] = myKrigingMat.Kriging.sigmaSQ;
[b(1,1), b(2,1)] = myKrigingMat.Kriging.beta;
%Rmat = myKrigingMat.Internal.Kriging.GP.R;
%Fmat = myKrigingMat.Internal.Kriging.Trend.F;





%% Kernel calculated "Manually" (for prediction within the OCP)
% Test Data
% Xtest = linspace(-10, 10, 20)';
% [Ypred,Yvar] = uq_evalModel(myKrigingMat,Xtest);
Xtrain = GPtraining.Xtrain;
Xtest = Xtrain(end-40:end, :);
Xtrain = Xtrain(1:end-40,:);
[Ytest, ~] = uq_evalModel(myKrigingMat, Xtest);

% Calculate kernel "manually" for consistency check
RR = kernelFn(Xtrain, Xtrain, theta(1,:));
size(RR)
RRs = kernelFn(Xtrain, Xtest, theta(1,:));
size(RRs)

YtestManual = RRs'*inv(RR)*GPtraining.Ytrain;


figure()
hold on
plot(Ytest)
plot(YtestManual)
%}


if showFigures==1
    [Ypred,Yvar] = uq_evalModel(myKrigingMat,Xtest);
    [YpredTr, YvarTr] = uq_evalModel(myKrigingMat,Xtrain);
    
    
    figure(1)
    % subplot
    subplot(2,2,1)
    plot(Ytrain(:,1), 'r.')
    hold on
    plot(YpredTr(:,1), 'b--')
    ylabel('y_1')
    title('Training Data')
    set(gca,'FontSize',15)
    box on
    % subplot
    subplot(2,2,2)
    plot(Ytrain(:,2), 'r.')
    hold on
    plot(YpredTr(:,2), 'b--')
    ylabel('y_2')
    title('Training Data')
    set(gca,'FontSize',15)
    box on
    % subplot
    subplot(2,2,3)
    plot(Ytest(:,1), 'r.')
    hold on
    plot(Ypred(:,1), 'b--')
    xlabel('Time index')
    ylabel('y_1')
    title('Test Data')
    set(gca,'FontSize',15)
    box on
    % subplot
    subplot(2,2,4)
    plot(Ytest(:,2), 'r.')
    hold on
    plot(Ypred(:,2), 'b--')
    xlabel('Time index')
    ylabel('y_2')
    title('Test Data')
    set(gca,'FontSize',15)
    box on
end

end

